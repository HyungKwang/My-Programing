######################## OS downgrade version 4 -> version 3 #########################################

# Runing main task
- name: onyx_upgrade
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    #version1: 3.6.1002
    version2: 3.6.2102
    version3: 3.6.6162
    version4: 3.6.8010

    ansible_network_os: onyx
    user: admin
    password: admin
    transfer_protocol: scp
    source_file: "/root/image-X86_64-{{ version3 }}.img"
    destination_folder: /var/opt/tms/images/ 
  remote_user: admin
  tasks:

# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
      
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
        
# print/write the current version
    - name: print_current_version
      debug:
        msg: "Current version {{ current_version }}"
    - name: Write  Version
      local_action: shell echo "Current version {{ current_version }}" >> /root/output.txt

# Add license

    - name: Add license
      onyx_config:
            lines:
              - license install XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
      register: add_license
      

# Get the SSD status

    - name: _exec iSmart -d /dev/sda
      onyx_command:
        commands: _exec iSmart -d /dev/sda
      register: ssd_data
      
# Write the SSD status to output.txt file

    - name: SSD status
      local_action: shell echo "{{ ssd_data.stdout_lines }}" >> /root/output.txt
      

# run the delete images command
    - name: delete images
      onyx_config:
            lines:
              - image delete image-X86_64-{{ current_version }}.img

      ignore_errors: yes


# check if the img file exits in location
    - name: check_source_file_existence
      stat:
         path: "{{ source_file }}"
      delegate_to: localhost
      register: source_file_exists

    - name: print_existence_of_source_file
      debug:
          var: source_file_exists
          verbosity: 2


# Scp file copy
    - name: copy_source_file_to_device
      net_put:
          dest: "{{ destination_folder }}"
          mode: binary
          protocol: "{{ transfer_protocol }}"
          src: "{{ source_file }}"
      vars:
        ansible_command_timeout: 1200
      tags: copy_to_onyx



# Image install
    - name: image install
      onyx_command:
           commands: image install image-X86_64-{{ version3 }}.img
      tags: image_install
      
    -  name: Sleep for 5 seconds and timeout
       tags: sleep5
       wait_for:
            delay: 5 
            timeout: 0      
      
# # image boot next
    - name: image boot next
      onyx_command:
           commands: image boot next
      tags: image boot next
            

# # save config
    - name: save config
      onyx_command:
           commands: write memory
      tags: write memory
            
            
# run the reload command
    - name: reload
      onyx_command:
            commands: reload noconfirm
      tags: reload
        
        
# use wait_for to wait for port 22 to be available on the switch after reboot
    - name: wait for switch to reboot
      delegate_to: localhost
      wait_for:
         host={{ inventory_hostname }}
         port=22
         delay=160
         timeout=300
      become: false
      tags: wait_for_ssh


######################## OS downgrad version 3 -> version 2 #########################################
- name: onyx_upgrade
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    #version1: 3.6.1002
    version2: 3.6.2102
    version3: 3.6.6162
    version4: 3.6.8010

    ansible_network_os: onyx
    user: admin
    password: admin
    transfer_protocol: scp
    source_file: "/root/image-X86_64-{{ version2 }}.img"
    destination_folder: /var/opt/tms/images/ 
  remote_user: admin
  tasks:

# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
      
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
        
# print the current version
    - name: print_current_version
      debug:
        msg: "Current version {{ current_version }}"
    - name: Write  Version
      local_action: shell echo "Current version {{ current_version }}" >> /root/output.txt
      
      
# Add license

    - name: Add license
      onyx_config:
            lines:
              - license install XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
      register: add_license
      

# Get the SSD status

    - name: get SSD status
      onyx_command:
        commands: _exec iSmart -d /dev/sda
      register: ssd_data
      
# Write the SSD status to output.txt file

    - name: SSD status
      local_action: shell echo "{{ ssd_data.stdout_lines }}" >> /root/output.txt
      

# run the delete images command
    - name: delete images
      onyx_config:
            lines:
              - image delete image-X86_64-{{ current_version }}.img
      ignore_errors: yes


# check if the img file exits in location
    - name: check_source_file_existence
      stat:
         path: "{{ source_file }}"
      delegate_to: localhost
      register: source_file_exists

    - name: print_existence_of_source_file
      debug:
          var: source_file_exists
          verbosity: 2


# Scp file copy
    - name: copy_source_file_to_device
      net_put:
          dest: "{{ destination_folder }}"
          mode: binary
          protocol: "{{ transfer_protocol }}"
          src: "{{ source_file }}"
      vars:
        ansible_command_timeout: 1200
      tags: copy_to_onyx



# Image install
    - name: image install
      onyx_command:
           commands: image install image-X86_64-{{ version2 }}.img
      tags: image_install
      
    -  name: Sleep for 5 seconds and timeout
       tags: sleep5
       wait_for:
            delay: 5 
            timeout: 0      
      
# image boot next
    - name: image boot next
      onyx_command:
           commands: image boot next
      tags: image boot next
            
# # save config
    - name: save config
      onyx_command:
           commands: write memory
      tags: write memory
            
            
# run the reload command
    - name: reload
      onyx_command:
            commands: reload noconfirm
      tags: reload
        
        
# use wait_for to wait for port 22 to be available on the switch after reboot
    - name: wait for switch to reboot
      delegate_to: localhost
      wait_for:
         host={{ inventory_hostname }}
         port=22
         delay=160
         timeout=300
      become: false
      tags: wait_for_ssh
      


######################## OS upgrade version 2 -> version 3 #########################################


- name: onyx_upgrade
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    #version1: 3.6.1002
    version2: 3.6.2102
    version3: 3.6.6162
    version4: 3.6.8010

    ansible_network_os: onyx
    user: admin
    password: admin
    transfer_protocol: scp
    source_file: "/root/image-X86_64-{{ version3 }}.img"
    destination_folder: /var/opt/tms/images/ 
  remote_user: admin
  tasks:
  

# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
      
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
        
# print the current version
    - name: print_current_version
      debug:
        msg: "Current version {{ current_version }}"
    - name: Write  Version
      local_action: shell echo "Current version {{ current_version }}" >> /root/output.txt
      
      
# Add license
    - name: Add license
      onyx_config:
            lines:
              - license install XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
      register: add_license
      
            
# Get the SSD status
    - name: _exec iSmart -d /dev/sda
      onyx_command:
        commands: _exec iSmart -d /dev/sda
      register: ssd_data
      
# Write the SSD status to output.txt file
    - name: SSD status
      local_action: shell echo "{{ ssd_data.stdout_lines }}" >> /root/output.txt
      
      
# run the delete images command
    - name: delete images
      onyx_config:
            lines:
              - image delete image-X86_64-{{ current_version }}.img
      ignore_errors: yes


# check if the img file exits in location
    - name: check_source_file_existence
      stat:
         path: "{{ source_file }}"
      delegate_to: localhost
      register: source_file_exists

    - name: print_existence_of_source_file
      debug:
          var: source_file_exists
          verbosity: 2

# Scp file copy
    - name: copy_source_file_to_device
      net_put:
          dest: "{{ destination_folder }}"
          mode: binary
          protocol: "{{ transfer_protocol }}"
          src: "{{ source_file }}"
      vars:
        ansible_command_timeout: 1200
      tags: copy_to_onyx



# Image install
    - name: image install
      onyx_command:
           commands: image install image-X86_64-{{ version3 }}.img
      tags: image_install
      
    -  name: Sleep for 5 seconds and timeout
       tags: sleep5
       wait_for:
            delay: 5 
            timeout: 0

#  image boot next
    - name: image boot next
      onyx_command:
           commands: image boot next
      tags: image boot next
            

# # save config
    - name: save config
      onyx_command:
           commands: write memory
      tags: write memory
            
 
# run the reload command
    - name: reload
      onyx_command:
            commands: reload noconfirm
      tags: reload
        
        
# use wait_for to wait for port 22 to be available on the switch after reboot
    - name: wait for switch to reboot
      delegate_to: localhost
      wait_for:
         host={{ inventory_hostname }}
         port=22
         delay=160
         timeout=300
      become: false
      tags: wait_for_ssh



######################## OS upgrade version 3 -> version 4 #########################################
 

- name: onyx_upgrade
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    #version1: 3.6.1002
    version2: 3.6.2102
    version3: 3.6.6162
    version4: 3.6.8010

    ansible_network_os: onyx
    user: admin
    password: admin
    transfer_protocol: scp
    source_file: "/root/image-X86_64-{{ version4 }}.img"
    destination_folder: /var/opt/tms/images/
 
  remote_user: admin
  tasks:
  

# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
      
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
        
# print the current version
    - name: print_current_version
      debug:
        msg: "Current version {{ current_version }}"
    - name: Write  Version
      local_action: shell echo "Current version {{ current_version }}" >> /root/output.txt



# Add license
    - name: Add license
      onyx_config:
            lines:
              - license install XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
      register: add_license
      
   

# Get the SSD status
    - name: _exec iSmart -d /dev/sda
      onyx_command:
        commands: _exec iSmart -d /dev/sda
      register: ssd_data
      
# Write the SSD status to output.txt file
    - name: SSD status
      local_action: shell echo "{{ ssd_data.stdout_lines }}" >> /root/output.txt
      
            

# run the delete images command
    - name: delete images
      onyx_config:
            lines:
              - image delete image-X86_64-{{ current_version }}.img
      ignore_errors: yes


# check if the img file exits in location
    - name: check_source_file_existence
      stat:
         path: "{{ source_file }}"
      delegate_to: localhost
      register: source_file_exists

    - name: print_existence_of_source_file
      debug:
          var: source_file_exists
          verbosity: 2


# Scp file copy
    - name: copy_source_file_to_device
      net_put:
          dest: "{{ destination_folder }}"
          mode: binary
          protocol: "{{ transfer_protocol }}"
          src: "{{ source_file }}"
      vars:
        ansible_command_timeout: 1200
      tags: copy_to_onyx



# Image install
    - name: image install
      onyx_command:
           commands: image install image-X86_64-{{ version4 }}.img
      tags: image_install
      
    -  name: Sleep for 5 seconds and timeout
       tags: sleep5
       wait_for:
            delay: 5 
            timeout: 0

# # image boot next
    - name: image boot next
      onyx_command:
           commands: image boot next
      tags: image boot next
            

# # save config
    - name: save config
      onyx_command:
           commands: write memory
      tags: write memory
            
 
# run the reload command
    - name: reload
      onyx_command:
            commands: reload noconfirm
      tags: reload
        
        
# use wait_for to wait for port 22 to be available on the switch after reboot
    - name: wait for switch to reboot
      delegate_to: localhost
      wait_for:
         host={{ inventory_hostname }}
         port=22
         delay=160
         timeout=300
      become: false
      tags: wait_for_ssh

 
########################The End#################
- name: onyx_upgrade
  hosts: ONYX
  gather_facts: no
  strategy: free
  connection: network_cli
  become: yes
  become_method: enable
  vars:
    ansible_network_os: onyx
    #version1: 3.6.1002
    version2: 3.6.2102
    version3: 3.6.6162
    version4: 3.6.8010

    ansible_network_os: onyx
    user: admin
    password: admin
    transfer_protocol: scp
    source_file: "/root/image-X86_64-{{ version3 }}.img"
    destination_folder: /var/opt/tms/images/
  remote_user: admin
  tasks:
  
# get current switch Onyx version with command "show version concise" and save it to a variable named curr_version

    - name: get_current_switch_version
      onyx_command:
        commands: show version concise
      register: curr_version
      
# save the onyx version as a fact named current_version
    - name: set_fact_current_version
      set_fact:
        current_version: "{{curr_version.stdout[0].split()[1] }}"
        
# print/write the current version
    - name: print_current_version
      debug:
        msg: "Current version {{ current_version }}"
    - name: Write  Version
      local_action: shell echo "Current version {{ current_version }}" >> /root/output.txt